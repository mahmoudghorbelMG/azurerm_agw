List of the minimum tests that should be applied when developping new app gateway element:

- new resource creation
    * normal
    * with existing name
    * with/without required parameters
    * with/without optional parameters
    * with/without existing/incorrect referenced params (like probe name for backend http settings)
- resource deletion
- parameters modification
    * addition of some new ones
    * deletion
    * delete all
    * addition from zero conf
- name modification
    * normal (non existing name)
    * existing name
- manual parameters modification (the provider should detect new conf and set initial one)
    * addition
    * deletion
    * modification of existing one
- manual resource deletion

Major Problems:
- param AffinityCookieName in Backend_http_settings: When set to null initially, azure API don't allow changing it. 
    Y Solution: put a default value ("ApplicationGatewayAffinity") as described in the Azure app gateway spec.
- the probe should be created before referencing it in backend http settings.
- can't make default value of string array (like status_code in probe.match).
    Y Solution: i make it required
- can't handle non optional SingleNestedAttributes like probe.match. 
    Y Solution: i make it required
- when we make a param as optional(1), computed(2), with default value(3) and put it with the default value(4),
if there is we delete this param in an update conf (plan), it is considered as "Nochanges" event
    Y Solution: no solution. Just keep it in mind and don't panic.
- when i use intDefaultModifier for minServers, if i update the conf by deleting it, the last value still exist while showing 
"no change" event in terraform plan. It should take the default value (0) and not keeping the last one
    Y Solution: i change "diags := tfsdk.ValueAs(ctx, req.AttributePlan, &str)" in intDefaultModifier by "diags := tfsdk.ValueAs(ctx, req.AttributeConfig, &str)"
- When i use ListNestedAttributes for Http_listener, i faced 2 main problems:
    1) when we have several http listeners for the same binding resource (ex: one for http et one for https) and we decide to 
    the name of one of them, how can we identify the old one to remove it from the gw and then update with the new one.
    2) if we remove on http listener from the declared list, the terraform update will show a very bad delta between plan
    and state, because they are both ordered lists (tables) to be compared
    * initial alternative: change to SetNestedAttributes which allow terraform to handle http listeners as non ordered tables
    - problem: the delta beween plan and state (for http listeners) is huge even for small change. 
    terraform plan to remove the whole http listeners list and add the new one. This is exactly the problem of azure provider
    Y Sollution: i consider one http listener (optional, that why i use pointer, to avoid unhelded null value) and one 
    https listenred that is required. this is my best.
- when i add ssl certificat support, this error was issued when calling azure API: 
        {
        │     "error": {
        │         "code": "ApplicationGatewayKeyVaultSecretRequiresUserAssignedIdentity",
        │         "message": "Application Gateway '/subscriptions/b3ae2f08-8ccb-4640-949e-b4c0d2acfde6/resourceGroups/shared-app-gateway/providers/Microsoft.Network/applicationGateways/app-gateway' requires a 'UserAssigned' Identity with 'get' access policy to the referenced KeyVault. Please provide so by using top level 'Identity' property.",
        │         "details": []
        │     }
        │ }
that means that the gw doesn't have access to the key vault to catch the certificate.
    Y Sollution: add an authorised managed identity (msi) to the gw.



when deleting, start with:
- probe
- backend address pool
- backend http settings
- http listener
if we delete manually a Request_routing_rule_http which was difiend by redirect_configuration, the later is delete too.

There was a specific exception:
azurermagw_webappBinding.citeo-binding: Refreshing state... [name=mahmoud-backendAddressPool-resource-name]
╷
│ Error: Request cancelled
│
│ The plugin6.(*GRPCProvider).PlanResourceChange request was cancelled.
╵

Stack trace from the terraform-provider-azurermagw plugin:

panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x59e1aa]

goroutine 100 [running]:
github.com/hashicorp/terraform-plugin-framework/types.int64Validate({0x2?, 0x59?}, {{0x0?, 0x0?}, {0x0?, 0x0?}}, 0x40bc4d?)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/types/int64.go:16 +0x8a
github.com/hashicorp/terraform-plugin-framework/types.primitive.Validate(0xa0?, {0xba36f0?, 0xc0002fd300?}, {{0x0?, 0x0?}, {0x0?, 0x0?}}, 0xf13958?)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/types/primitive.go:121 +0xa5
github.com/hashicorp/terraform-plugin-framework/tfsdk.State.getAttributeValue({{{0xba5aa0, 0xc0006b8450}, {0x9e2320, 0xc000542e70}}, {0xc0004ef140, 0x0, 0x0, {0x0, 0x0}, {0x0, ...}, ...}}, ...)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/state.go:95 +0x29e
github.com/hashicorp/terraform-plugin-framework/tfsdk.Attribute.modifyPlan({{0xba4690, 0xf13958}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, 0x0, 0x0, ...}, ...)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/attribute.go:491 +0x168
github.com/hashicorp/terraform-plugin-framework/tfsdk.Attribute.modifyPlan({{0x0, 0x0}, {0xba6000, 0xc0004ef2f0}, {0x0, 0x0}, {0x0, 0x0}, 0x0, 0x1, ...}, ...)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/attribute.go:668 +0x1e68
github.com/hashicorp/terraform-plugin-framework/tfsdk.Schema.modifyPlan({_, _, _, {_, _}, {_, _}, {_, _}}, {0xba36f0, ...}, ...)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/schema.go:321 +0x250
github.com/hashicorp/terraform-plugin-framework/tfsdk.(*server).planResourceChange(0xc00036be00, {0xba36f0, 0xc0002fd300}, 0xc00023d720, 0xc0002e39f0)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/serve.go:810 +0x10ce
github.com/hashicorp/terraform-plugin-framework/tfsdk.(*server).PlanResourceChange(0xc0003ca930?, {0xba36f0?, 0xc0002fd2c0?}, 0x40cd45?)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-framework@v0.5.0/tfsdk/serve.go:635 +0x90
github.com/hashicorp/terraform-plugin-go/tfprotov6/tf6server.(*server).PlanResourceChange(0xc000167460, {0xba3798?, 0xc0004eee10?}, 0x74355063384c2f71?)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-go@v0.4.0/tfprotov6/tf6server/server.go:314 +0x6c
github.com/hashicorp/terraform-plugin-go/tfprotov6/internal/tfplugin6._Provider_PlanResourceChange_Handler({0xa72540?, 0xc000167460}, {0xba3798, 0xc0004eee10}, 0xc0001129c0, 0x0)
        /home/mahmoud/go/pkg/mod/github.com/hashicorp/terraform-plugin-go@v0.4.0/tfprotov6/internal/tfplugin6/tfplugin6_grpc.pb.go:363 +0x170
google.golang.org/grpc.(*Server).processUnaryRPC(0xc0002fb340, {0xba6058, 0xc000274000}, 0xc000370300, 0xc00036be90, 0xf47cc8, 0x0)
        /home/mahmoud/go/pkg/mod/google.golang.org/grpc@v1.32.0/server.go:1194 +0xc8f
google.golang.org/grpc.(*Server).handleStream(0xc0002fb340, {0xba6058, 0xc000274000}, 0xc000370300, 0x0)
        /home/mahmoud/go/pkg/mod/google.golang.org/grpc@v1.32.0/server.go:1517 +0xa1b
google.golang.org/grpc.(*Server).serveStreams.func1.2()
        /home/mahmoud/go/pkg/mod/google.golang.org/grpc@v1.32.0/server.go:859 +0x98
created by google.golang.org/grpc.(*Server).serveStreams.func1
        /home/mahmoud/go/pkg/mod/google.golang.org/grpc@v1.32.0/server.go:857 +0x28a

Error: The terraform-provider-azurermagw plugin crashed!

This is always indicative of a bug within the plugin. It would be immensely
helpful if you could report the crash with the plugin's maintainers so that it
can be fixed. The output above should help diagnose the issue.


when this exception occurs:
- initially, i set Request_routing_rule_http as optional, so i made it like Http_listener. when reading, i put it to nil if removed (manually or new plan).
- when i set a Request_routing_rule_http attribute in main.tf then, plan and apply, it's ok. then i remove it, it's ok. 
- however, when i try to add it again it gave this previous Sollution. i suspect the priority attribute when Request_routing_rule_http become nil.
 Y Sollution: transform priority to types.String in Request_routing_rule and in the Schema instead of types.Int64

 